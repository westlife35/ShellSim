<html lang="en"><head>
    <meta charset="UTF-8">
    <title></title>
<style id="system" type="text/css">h1,h2,h3,h4,h5,h6,p,blockquote {    margin: 0;    padding: 0;}body {    font-family: "Helvetica Neue", Helvetica, "Hiragino Sans GB", Arial, sans-serif;    font-size: 13px;    line-height: 18px;    color: #737373;    margin: 10px 13px 10px 13px;}a {    color: #0069d6;}a:hover {    color: #0050a3;    text-decoration: none;}a img {    border: none;}p {    margin-bottom: 9px;}h1,h2,h3,h4,h5,h6 {    color: #404040;    line-height: 36px;}h1 {    margin-bottom: 18px;    font-size: 30px;}h2 {    font-size: 24px;}h3 {    font-size: 18px;}h4 {    font-size: 16px;}h5 {    font-size: 14px;}h6 {    font-size: 13px;}hr {    margin: 0 0 19px;    border: 0;    border-bottom: 1px solid #ccc;}blockquote {    padding: 13px 13px 21px 15px;    margin-bottom: 18px;    font-family:georgia,serif;    font-style: italic;}blockquote:before {    content:"C";    font-size:40px;    margin-left:-10px;    font-family:georgia,serif;    color:#eee;}blockquote p {    font-size: 14px;    font-weight: 300;    line-height: 18px;    margin-bottom: 0;    font-style: italic;}code, pre {    font-family: Monaco, Andale Mono, Courier New, monospace;}code {    background-color: #fee9cc;    color: rgba(0, 0, 0, 0.75);    padding: 1px 3px;    font-size: 12px;    -webkit-border-radius: 3px;    -moz-border-radius: 3px;    border-radius: 3px;}pre {    display: block;    padding: 14px;    margin: 0 0 18px;    line-height: 16px;    font-size: 11px;    border: 1px solid #d9d9d9;    white-space: pre-wrap;    word-wrap: break-word;}pre code {    background-color: #fff;    color:#737373;    font-size: 11px;    padding: 0;}@media screen and (min-width: 768px) {    body {        width: 748px;        margin:10px auto;    }}</style><style id="custom" type="text/css"></style></head>
<body><h3>详细设计文档</h3>
<ul>
<li><p>1.方案流程</p>
<pre><code> 1.主循环中，首先使用readline()函数（需引入readline库才可使用）读取用户输入的shell命令，并存入一个字符指针中,以记录下用户的历史命令。

 2.判断读取的命令是否为改变命令提示符的命令change。如果是则改变命令提示符，并返回新的命令提示符等待读取下一条命令，也就是返回1进行重新循环判断。如果不是则继续下一步。

 3.判断是否是管道操作。如果是管道，将管道命令分割，并将输入输出重定向到管道，然后对每个命令执行redirect_normal()函数。如果不是管道，则对整个命令执行redirect_normal()函数，并进行下一步的判断。

 3.在redirect_normal()函数中，根据有没有重定向符号"&gt;"、"&lt;"判断是否需要重定向，如果不需要重定向，直接调用execvp()函数执行相应的操作，如果需要重定向，则做重定向后再调用execvp()函数。</code></pre>
</li>
</ul>
<ul>
<li><p>2.具体函数、结构和变量</p>
<blockquote>
<p>2.1 存储结构</p>
</blockquote>
<pre><code> 1.用于后台管理的结构，用jobs指令查看后台管理。
 typedef struct Back_Jobs{
 pid_t pid;
 char*cmd;
 int status;
 }Back_Jobs;

 2.用于作判断情况的bool类型（C中不直接支持bool类型），所以用如下的定义：
 typedef enum __bool { false = 0, true = 1, } bool;
 即可以使用bool类型。</code></pre>
<blockquote>
<p>2.2 全局变量</p>
</blockquote>
<pre><code> 1.bool is_Ctrl_Z = false;
 判断是否在运行程序时有Ctrl+Z操作，将程序暂停运行，转入后台的操作。

 2.int current_pid;
 记录当前进程id。

 3.int back_jobs_index =1;
 记录后台程序的序号。

 4.Back_Jobs *back_jobs[MAX_BACK_NUM];
 记录后台运行程序状态。        

 5.char Symbol[10];
 记录输入命令提示符的变量，通过改变该变量，可以更改命令输入提示符。最大长度为9。</code></pre>
<blockquote>
<p>2.3 函数</p>
</blockquote>
<pre><code> 1.int redirect_normal(char *input);

 处理一般命令以及重定向命令的函数，重定向包括输入重定向和输出重定向。用'&lt;',"&lt;&lt;"表示输入重定向，其中'&lt;&lt;'这个连续两个小符号，他代表的是『结束的输入字符』的意思。这样当空行输入eof字符，输入自动结束，不用ctrl+D，和其相关的有以下几个函数。用'&gt;',"&gt;&gt;"表示输出重定向，其中"&gt;&gt;"表示以追加的方式重定向.

 和重定向相关的函数如下：
 int count_input_num(const char *input);
 该函数可以计算输入指令分为哪几个部分。

 2.int piple_command(char*input);

 该函数是用来执行管道命令的，需要创建管道以及将管道重定向的子进程。通常一个管道由一个进程创建，然后该进程调用fork，此后父子进程之间就可以应用管道。
 对于父进程到子进程的管道，父进程关闭管道的读端(fd[0])，子进程关闭写端(fd[1])。构造从子进程到父进程的管道，父进程关闭fd[1]，子进程关闭fd[0]。

 其他相关函数如下：
 int count_piple_number(const char *input);
 计算管道分割出的部分数量。

 3.void do_cd(char*argv[]);

 cd转换路径的响应函数。

 4.bool is_back(char*input);

 判断是否是后台运行的函数，本程序中，使用程序名+“&amp;”结尾的方式可以将程序在后台运行。

 5.bool change_symbol(char*input);

 判断输入语句是否为改变命令提示符的语句，如果是，改变提示符并给出新的提示符然后接受下一条语句，如果不是，则重新接受语句。

 6.void handle_sigint(int sig);

 接受ctrl+c终止运行的信号。

 7.void handle_sigchld(int sig);
 void handle_sigstcp(int sig);

 接受ctrl+z停止运行，并把任务放入后台的操作。放入后台的任务可以用jobs命令查看，并且可以用bg命令，让任务在后台完成。</code></pre>
</li>
</ul>
<p>Edit By <a href="http://mahua.jser.me">MaHua</a></p>
</body></html>